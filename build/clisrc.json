{
  "build-drives.js": "/// <reference path=\"./typing.d.ts\" />\r\nvar Drive = require('./Drive');\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar mkdir = require('./mkdir');\r\nfunction build_drives(config, args, options, cmd) {\r\n    var logger = console.log.bind(console);\r\n    var dest = path.resolve(\"\" + (config.dest ? config.dest : \"./\")) + \"/\";\r\n    mkdir(dest);\r\n    for (var name in config.drives) {\r\n        logger('Bulding drives: ' + name);\r\n        var dconfig = config.drives[name];\r\n        var drive = new Drive;\r\n        if (!(dconfig.layers instanceof Array) || (!dconfig.layers.length))\r\n            throw Error('No layers provided for dirve: ' + name);\r\n        var output = [];\r\n        for (var i = 0; i < dconfig.layers.length; i++) {\r\n            var layer = dconfig.layers[i];\r\n            var layerfile = dest + layer + '.nodefs.json';\r\n            var layerdata = fs.readFileSync(layerfile).toString();\r\n            drive.addLayer(JSON.parse(layerdata));\r\n        }\r\n        //console.log(output);\r\n        var drivefile = dest + name + \".nodefs.js\";\r\n        drive.write(drivefile);\r\n        //var drivedata = output.join('\\n');\r\n        //fs.writeFileSync(drivefile, drivedata);\r\n        logger('Saving drive: ' + drivefile);\r\n    }\r\n}\r\nmodule.exports = build_drives;\r\n",
  "build-layers.js": "/// <reference path=\"./typing.d.ts\" />\r\nvar Layer = require('./Layer');\r\nvar path = require('path');\r\nvar mkdir = require('./mkdir');\r\nfunction build_layers(config, args, options, cmd) {\r\n    var logger = console.log.bind(console);\r\n    var dest = path.resolve(\"\" + (config.dest ? config.dest : \"./\")) + \"/\";\r\n    mkdir(dest);\r\n    var layers = {};\r\n    for (var name in config.layers) {\r\n        logger('Bulding layer: ' + name);\r\n        var lconf = config.layers[name];\r\n        var layer = layers[name] = new Layer(lconf.base ? lconf.base : '');\r\n        if (!(lconf.globs instanceof Array) || (!lconf.globs.length))\r\n            throw Error('No layer globs defined for layer: ' + name);\r\n        layer.addByGlobs(lconf.globs);\r\n        var layerfile = dest + name + '.nodefs.json';\r\n        var size = layer.write(layerfile);\r\n        logger('Saving layer: ' + layerfile);\r\n        logger('Size: ' + size);\r\n        logger('\\n');\r\n    }\r\n    return layers;\r\n}\r\nmodule.exports = build_layers;\r\n",
  "build.js": "var log = require('./log');\r\nvar Builder = (function () {\r\n    function Builder() {\r\n    }\r\n    Builder.buildLayers = function (manifest) {\r\n        var layer = require('./layer');\r\n        var layers = {};\r\n        for (var name in manifest.data.layers) {\r\n            log.info('Bulding layer: ' + name);\r\n            var mylayer = layers[name] = new layer.Layer(name);\r\n            mylayer.setConfig(manifest.data.layers[name]);\r\n            mylayer.addFilesByGlobs();\r\n            var filepath = mylayer.write(manifest.destinationFolder);\r\n            log.info('Saving layer: ' + filepath);\r\n        }\r\n    };\r\n    Builder.mergeLayers = function (manifest) {\r\n    };\r\n    return Builder;\r\n})();\r\nexports.Builder = Builder;\r\n",
  "cli.js": "var cli = require('cli');\r\nvar log = require('./log');\r\nvar commands = [\r\n    'all',\r\n    'merge',\r\n    'layers',\r\n    'drive',\r\n];\r\ncli.parse({\r\n    verbose: ['v', 'Aggressively print logs to console'],\r\n    debug: ['d', 'Output debug info']\r\n}, commands);\r\ncli.main(function (args, options) {\r\n    try {\r\n        if (cli.command) {\r\n            if (commands.indexOf(cli.command) < 0)\r\n                throw Error('Invalid command: ' + cli.command);\r\n            var cmd = require('./command/' + cli.command + '.js');\r\n            cmd(args, options);\r\n        }\r\n        else {\r\n            log.error('Command not found: ' + cli.command);\r\n        }\r\n    }\r\n    catch (e) {\r\n        log.error(e);\r\n        if (options.debug) {\r\n            console.log(e.stack || e);\r\n        }\r\n    }\r\n});\r\n",
  "command/Command.js": "var Command = (function () {\r\n    function Command() {\r\n    }\r\n    return Command;\r\n})();\r\nmodule.exports = Command;\r\n",
  "command/layers.js": "var build = require('../build');\r\nfunction command_layers(args, options) {\r\n    var manifest = require('../manifest');\r\n    var manifest = manifest.Manifest.readFile(args[0]);\r\n    var layers = build.Builder.buildLayers(manifest);\r\n}\r\nmodule.exports = command_layers;\r\n",
  "command/merge.js": "var build = require('../build');\r\nfunction command_merge(args, options) {\r\n    var manifest = require('../manifest');\r\n    var manifest = manifest.Manifest.readFile(args[0]);\r\n    build.Builder.mergeLayers(manifest);\r\n}\r\nmodule.exports = command_merge;\r\n",
  "Drive.js": "/// <reference path=\"typing.d.ts\" />\r\nvar fs = require('fs');\r\nvar Drive = (function () {\r\n    function Drive(mountpoint) {\r\n        if (mountpoint === void 0) { mountpoint = \"./\"; }\r\n        this.layers = [];\r\n        /**\r\n         * Mountpoint as specified per layer.\r\n         */\r\n        this.mountpoints = [];\r\n        this.mp = mountpoint;\r\n    }\r\n    Drive.prototype.addLayer = function (layer, mp) {\r\n        this.layers.push(layer);\r\n        this.mountpoints.push(mp ? mp : this.mp);\r\n    };\r\n    Drive.prototype.build = function () {\r\n        var _this = this;\r\n        var self = this;\r\n        var output = [];\r\n        output.push(\"var l = [];\");\r\n        output.push(\"var m = [];\");\r\n        this.layers.forEach(function (layer, i) {\r\n            output.push('l[' + i + '] = ' + JSON.stringify(layer));\r\n            output.push('m[' + i + '] = \"' + _this.mountpoints[i] + '\"');\r\n        });\r\n        return output.join(\"\\n\");\r\n    };\r\n    Drive.prototype.write = function (filename) {\r\n        fs.writeFileSync(filename, this.build());\r\n    };\r\n    return Drive;\r\n})();\r\nmodule.exports = Drive;\r\n",
  "index.js": "var fs = require('fs');\nvar glob = require('glob');\nvar uglify = require('uglify-js');\n\nvar package = {};\nfunction add_files(files) {\n    files.forEach(function(file) {\n        var relative = file.replace(dir, '.');\n\n        var loader_raw = function(file) {\n            return fs.readFileSync(file).toString();\n        };\n\n        var loader = function(file) {\n            try {\n                return uglify.minify(file).code;\n            } catch(e) {\n                return loader_raw(file);\n            }\n        };\n\n        console.log(file);\n        package[relative] = loader(file);\n    });\n}\n\nvar dir = '/code/jssh';\nvar files = glob.sync(dir + '/**/*.+(js|json|md|peg)');\n//var files = glob.sync(dir + '/*.+(js|json|md)');\n\nadd_files(files);\n\n\nvar output = 'archive.json';\nconsole.log(package);\nfs.writeFileSync(output, JSON.stringify(package, null, 2));",
  "layer.js": "/// <reference path=\"typing.d.ts\" />\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar glob = require('glob');\r\nvar LoaderRaw = require('./loader/Raw');\r\nvar LoaderJs = require('./loader/Js');\r\nvar Layer = (function () {\r\n    function Layer(name) {\r\n        this.files = {};\r\n        this.loaderRaw = new LoaderRaw;\r\n        this.loaderJs = new LoaderJs;\r\n        this.name = name;\r\n    }\r\n    Layer.prototype.error = function (msg) {\r\n        throw Error('Layer (' + this.name + '): ' + msg);\r\n    };\r\n    Layer.prototype.setConfig = function (config) {\r\n        if (!config.base)\r\n            this.error('Base directory not defined.');\r\n        if (!(config.globs instanceof Array) || (!config.globs.length))\r\n            this.error('No layer globs defined.');\r\n        config.minify = typeof config.minify == 'undefined' ? true : !!config.minify;\r\n        this.conf = config;\r\n        this.baseDir = path.resolve(this.conf.base) + path.sep;\r\n    };\r\n    Layer.prototype.load = function (file) {\r\n        if (this.conf.minify) {\r\n            try {\r\n                return this.loaderJs.load(file);\r\n            }\r\n            catch (e) {\r\n                return this.loaderRaw.load(file);\r\n            }\r\n        }\r\n        else {\r\n            return this.loaderRaw.load(file);\r\n        }\r\n    };\r\n    Layer.prototype.addFiles = function (files) {\r\n        var self = this;\r\n        files.forEach(function (file) {\r\n            var relative = path.relative(self.baseDir, file);\r\n            self.files[relative] = self.load(file);\r\n        });\r\n    };\r\n    Layer.prototype.addByGlob = function (globexpr) {\r\n        var files = glob.sync(this.baseDir + globexpr);\r\n        this.addFiles(files);\r\n    };\r\n    Layer.prototype.addFilesByGlobs = function () {\r\n        var self = this;\r\n        this.conf.globs.forEach(function (globexpr) {\r\n            self.addByGlob(globexpr);\r\n        });\r\n    };\r\n    Layer.prototype.getFileName = function () {\r\n        if (this.conf.filename)\r\n            return this.conf.filename;\r\n        else\r\n            return this.name + '.json';\r\n    };\r\n    Layer.prototype.write = function (dest) {\r\n        if (this.conf.dest)\r\n            dest = this.conf.dest;\r\n        var filename = this.getFileName();\r\n        var filepath = path.resolve(dest + '/' + filename);\r\n        var json = JSON.stringify(this.files, null, 2);\r\n        fs.writeFileSync(filepath, json);\r\n        return filepath;\r\n    };\r\n    return Layer;\r\n})();\r\nexports.Layer = Layer;\r\n",
  "loader/Js.js": "/// <reference path=\"../typing.d.ts\" />\r\nvar uglify = require('uglify-js');\r\nvar LoaderJs = (function () {\r\n    function LoaderJs() {\r\n    }\r\n    LoaderJs.prototype.load = function (file) {\r\n        return uglify.minify(file).code;\r\n    };\r\n    return LoaderJs;\r\n})();\r\nmodule.exports = LoaderJs;\r\n",
  "loader/Raw.js": "/// <reference path=\"../typing.d.ts\" />\r\nvar fs = require('fs');\r\nvar LoaderRaw = (function () {\r\n    function LoaderRaw() {\r\n    }\r\n    LoaderRaw.prototype.load = function (file) {\r\n        return fs.readFileSync(file).toString();\r\n    };\r\n    return LoaderRaw;\r\n})();\r\nmodule.exports = LoaderRaw;\r\n",
  "log.js": "/// <reference path=\"typing.d.ts\" />\r\nvar logger = require(\"npmlog\");\r\nmodule.exports = logger;\r\n",
  "manifest.js": "/// <reference path=\"typing.d.ts\" />\r\nvar path = require('path');\r\nvar fs = require('fs');\r\n/**\r\n * 'manifest' is the `portable.js` file the we read to get the JSON object defining how we should build the `fs`.\r\n */\r\nvar Manifest = (function () {\r\n    function Manifest() {\r\n        /**\r\n         * The outputs of the manifest file.\r\n         */\r\n        this.data = {};\r\n        /**\r\n         * Folder where the files will be built.\r\n         * @type {string}\r\n         */\r\n        this.destinationFolder = '';\r\n    }\r\n    Manifest.readFile = function (file) {\r\n        if (file === void 0) { file = ''; }\r\n        var manifest = new Manifest;\r\n        manifest.readFile(file);\r\n        return manifest;\r\n    };\r\n    Manifest.prototype.error = function (msg) {\r\n        throw Error('Manifest: ' + msg + ' (' + this.filepath + ').');\r\n    };\r\n    Manifest.prototype.readFile = function (file) {\r\n        if (file === void 0) { file = ''; }\r\n        if (!file)\r\n            file = Manifest.defaultManifestFile;\r\n        file = path.resolve(file);\r\n        if (!fs.existsSync(file))\r\n            throw Error('Manifest not found: ' + file);\r\n        this.data = require(file);\r\n        this.validate();\r\n        this.parse();\r\n    };\r\n    Manifest.prototype.validate = function () {\r\n        if (typeof this.data != 'object')\r\n            this.error('Invalid manifest contents');\r\n        if (!this.data.dest || (typeof this.data.dest != 'string'))\r\n            this.error('Destination `dest` not specified.');\r\n    };\r\n    Manifest.prototype.parse = function () {\r\n        this.destinationFolder = path.resolve(this.data.dest);\r\n    };\r\n    Manifest.defaultManifestFile = 'portable.js';\r\n    return Manifest;\r\n})();\r\nexports.Manifest = Manifest;\r\n",
  "tpl/drive-mount.js": "\n\nvar drive = nodefs.mount(\"./\", layer);\n",
  "util/extend.js": "function extend(origin, add) {\r\n    if (!origin || (typeof origin != 'object'))\r\n        origin = {};\r\n    if (!add || (typeof add != 'object'))\r\n        add = {};\r\n    for (var prop in add)\r\n        origin[prop] = add[prop];\r\n    if (arguments.length > 2) {\r\n        var args = [].slice.call(arguments, 1);\r\n        args[0] = origin;\r\n        return extend.apply(this, args);\r\n    }\r\n    else\r\n        return origin;\r\n}\r\nmodule.exports = extend;\r\n",
  "util/mkdir.js": "/// <reference path=\"../typing.d.ts\" />\r\nvar fs = require('fs');\r\nvar path = require('path');\r\n/**\r\n * Create recursively directories.\r\n */\r\nfunction mkdir(dir, mode) {\r\n    if (fs.existsSync(dir) && fs.statSync(dir).isDirectory())\r\n        return;\r\n    var parts = path.normalize(dir).split(path.sep);\r\n    mode = mode || process.umask();\r\n    var create = function (dir, mode) {\r\n        if (!fs.existsSync(dir))\r\n            fs.mkdirSync(dir, mode);\r\n        if (!fs.statSync(dir).isDirectory())\r\n            throw Error('Expected directory:' + dir);\r\n    };\r\n    var prefix = parts[0]; // `c:` on Windows.\r\n    for (var i = 1; i < parts.length; i++) {\r\n        prefix += path.sep + parts[i];\r\n        create(prefix, mode);\r\n    }\r\n}\r\nmodule.exports = mkdir;\r\n"
}